############# Print Tree
def printtree(root):
  ####edge cae
  if root==None:
    return
  print(root.data)
  #####if no child no execution of for loop so no base case reqd
  for child in root.children:  
    printtree(child)

#########print tree level wise

def printtree(root):
  ####edge cae
  if root==None:
    return
  print(root.data,":",end="")
  for child in root.children:  
    printtree(child.data,",",end="")
   
   print()
  #####if no child no execution of for loop so no base case reqd
  for child in root.children:  
    printtree(child)

#################Taking input in Generic Tree
def takeTreeInput(root):
  print("Enter root data")
  rootdata=int(input())
  if rootdata == -1:
    return None
    
  root =  Treenode(rootdata)
  print("Enter no of children for ",rootdata)
  childcount = int(input())
  for i in range(childcount):
    child = taketreeinput()
    root.children.append(child)
  return root
  
  
  
  
  ############ No of nodes in generic tree
  
  def numnodes(root):
    count = 0
    ### Edge case when no root is  passed
    if root == None:
      return count
    count += 1
    for child in root.children:
      count += numnodes(child)
      
    return count 
  
  ############### Sum of all nodes
  
def sumofNodes(tree):
    sum = 0
    if tree == None:
        return sum
    
    sum += tree.data
    
    for child in tree.children:
        sum += sumofNodes(child)
    
    return sum
    
    
    #################height of a generic tree
    
    def height(root):
    if root == None:
        return 0
    ht = 0
    for child in root.children:
        ht = max(ht,height(child))
    
    return 1 + ht

    
    
    ############ Node With Largest Data
    def maxDataNode(tree):
    maxnode = -1
    if tree == None:
        return -1
    maxm = tree.data
    for child in tree.children:
        maxm = max(maxm,maxDataNode(child))
    return maxm


#########Take input level wise

import queue
def taketreeinputlevelwise():
  q=queue.Queue()
  print("Enter root")
  rootdata=int(input())
  if rootdata ==-1:
    return None
  
  root= TreeNode(rootdata)
  q.put(root)
  while not q.empty():
    curr_node = q.get()
    print("Enter no of children for ",curr_node.data)
    noofchildren = int(input())
    for i in  range(noofchildren):
      print("Enter child of",curr_node.data)
      childdata = int(input())
      child = TreeNode(childdata)
      curr_node.children.append(child)
      q.put(child)
      
      
      
###########contains X

def containsX(tree, x):
    
    if tree == None:
        return False
    if tree.data == x:
        return True
    
    for child in tree.children:
        out = containsX(child, x)
        if out == True:
            return out
    
    return False
        
        
################# No of leaf Node       
    
      
def leafNodeCount(tree):
    if tree == None:
        return 0
    
    if len(tree.children)==0:
        return 1
    
    leaf = 0
    
    for child in tree.children:
        leaf  += leafNodeCount(child)
    
    return leaf
    
    
    
    ##################  Node with maximum child sum
    
    def maxSumNode(tree):
    
    if tree == None:
        return None,0

    rootchildsum = tree.data
    
    for child in tree.children:
        rootchildsum += child.data
    
    maxsum = rootchildsum
    maxnode = tree
    
    for child in tree.children:
        node,sum = maxSumNode(child)
        
        if sum > rootchildsum:
            maxsum = sum
            maxnode = node
    
    return maxnode,maxsum
                    


  
  
  



    
