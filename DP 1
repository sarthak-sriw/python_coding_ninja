Memoization - storing results of recursion and returning result of recursion if stored

def fibonacci(n):
  if n==0 or n==1:
    return n
   
  return fibonacci(n-1) + fibonacci(n-2)

through dp
Time complexity reduced from o(2^n) to o(n)


def fibonacciR(n,dp):
  if n==0 or n==1:
    return n
  
  if  dp[n-1]==-1:
    ans1 = fibonacciR(n-1,dp)
    dp[n-1] = ans1
  else:
    ans1 = dp[n-1]
  if dp[n-2] == -1:
    ans2 = fibonacciR(n-2,dp)
    dp[n-2] = ans2  
  else:
    ans2 = dp[n-2]
  
  ans = an1 + ans2
   
  return ans
 
n = int(input())
dp = [-1 for i in range(n+1)]
ans = fibonacciR(n,dp)
print(ans)



########iteratively

def fibonacciI(n):
  dp = [-1 for i in range(n+1)]
  dp[0]=0
  dp[1]=1
  i=2
  while i<=n:
    dp[i] = dp[i-1]+dp[i-2]
    i+=1
  return dp[n]
  
n = int(input())
ans = fibonacciI(n)
print(ans)











