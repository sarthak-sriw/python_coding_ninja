################# Removing Leaf Node
def removeleaf(root):
  if root == None:
    return None
    
  if root.left == None and root.right == None:
    return None
    
  root.left = removeleaf(root.left)
  root.right = removeleaf(root.right)
  
  return root
  
###########mirror binary tree

  def mirrorBinaryTree(root) :
    
    if root == None:
        return None
    
    mirrorBinaryTree(root.left)
    mirrorBinaryTree(root.right) 
    
    tmp = root.left
    root.left = root.right
    root.right = tmp
    

########## Binary Tree Is Balanced

Time complexity O(n^2) and O(nlogn)
For every node it is checkinh height

def height(root):
  if root==None:
    return 0
   return 1 + max(height(root.left),height(root.right))
   
   
def isbalanced(root):
  if root==None:
    return True
    
  lt = height(root.left)
  rt = height(root.right)
  
  if lt-rt>1 or rt-lt>1:
    return False
  
  leftbalanced = isbalanced(root.left)
  rightbalanced = isbalanced(root.right)
  
  if leftbalanced and rightbalanced:
    return True
  else:
    return False
    
    
def getheightBalanced(root):
  if root==None:
    return 0,True
  
  lt,leftbalanced = getheightBalanced(root.left)
  rt,rightbalanced = getheightBalanced(root.right)
  
  h = 1 + max(lh,rh)
  if lt-rt>1 or rt-lt>1:
    return h,False
  
  if leftbalanced and rightbalanced:
    return h,True
  else:
    return h,False
    
################### Diameter of Binary Tree


    




